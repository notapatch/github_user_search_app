#!/usr/bin/env ruby
require "fileutils"

# path to your application root.
APP_ROOT = File.expand_path("..", __dir__)

def setup
  FileUtils.chdir APP_ROOT do
    log "installing gems"
    # Only do bundle install if the much-faster
    # bundle check indicates we need to
    system "bundle check || bundle install"

    log "installing Node modules"
    # Only do yarn install if the much-faster
    # yarn check indicates we need to. Note that
    # --check-files is needed to force Yarn to actually
    # examine what's in the node_modules
    # Note: Rails removed yarn from the setup. I don't
    #       know why. However, needed on this project
    #       If it breaks it's because yarn isn't in
    #       environment
    system! "yarn check --check-files || yarn install"

    log "Dropping & recreating the development database"
    # Note that the very first time this runs, db:reset
    # will fail, but this failure is fixed by doing a
    # db:migrate
    # Note Rails setup uses db:prepare which will create
    #      the database if not present and run migration
    #      files if they haven't been run previously.
    #      db:reset will db:drop db:create and db:migrate
    #      This makes the database setup idempotent and
    #      encourages programmers to programmatically
    #      change the database and have the same dataset
    system! "bin/rails db:reset || bin/rails db:migrate"

    log "Dropping & recreating the test database"
    # Setting the RAILS_ENV explicitly to be sure
    # we actually reset the test database
    system!({ "RAILS_ENV" => "test" }, "bin/rails db:reset")


    log "All set up."
    log ""
    log "To see commonly-needed commands, run:"
    log ""
    log "     bin/setup help"
    log ""
  end
end

def help
  log "Useful commands:"
  log ""
  log "    bin/dev"
  log "       # run app locally"
  log ""
  log "    bin/ci"
  log "       # runs all tests and checks as CI would"
  log ""
  log "    bin/tests"
  log "       # runs all tests"
  log ""
  log "    bin/tests-unit"
  log "       # run non-system tests"
  log ""
  log "    bin/tests-system"
  log "       # run system tests"
  log ""
  log "    bin/setup help"
  log "       # show this help"
  log ""
end

# start of helpers

# We don't want the setup method to have
# to do all this error checking, and we
# also want to explicitly log what we
# are executing, so we use this method
# instead of Kernel#system and friends
def system!(*args)
  log "Executing #{args}"
  if system(*args)
    log "#{args} succeeded"
  else
    log "#{args} failed"
    abort
  end
end

# It's helpful to know what messages came
# from this script, so we'll use log
# instead of puts to communicate with the user
def log(message)
  puts "[ bin/setup ] #{message}"
end

# end of helpers

if ARGV[0] == "help"
  help
else
  setup
end